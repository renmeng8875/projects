#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.4.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
       default-lazy-init="false">

    <description>Spring公共配置</description>

    <context:property-placeholder ignore-resource-not-found="true"
                                  location="classpath*:/application.properties"/>
    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="${package}">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- MyBatis配置 -->
    <bean id="connectionInterceptor" class="com.yy.ent.platform.core.mybatis.ConnectionInterceptor"/>

    <!--${dbname}-->
    <bean id="dataSource${dbname}" class="com.yy.ent.platform.core.mybatis.RoutingDataSourceFactoryBean">
        <property name="conf" value="classpath:${dbname}db.xml"/>
    </bean>
    <bean id="dbNameGenerator${dbname}" class="com.yy.ent.platform.core.mybatis.DbBeanNameGenerator">
        <property name="dbName" value="${dbname}"/>
    </bean>
    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory${dbname}" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource${dbname}"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="${package}.common.${dbname}.model"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/${dbname}/*Mapper.xml"/>
        <property name="plugins">
            <ref bean="connectionInterceptor"/>
        </property>
    </bean>
    <!-- 扫描basePackage 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="${package}.repository.${dbname}.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory${dbname}"/>
        <property name="nameGenerator" ref="dbNameGenerator${dbname}"/>
    </bean>

    <!-- JSR303 Validator定义 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!--cache aop-->
    <bean id="cacheInterceptor" class="com.yy.ent.platform.core.cache.CacheInterceptor">
        <property name="cacheManager">
            <bean class="com.yy.ent.platform.core.cache.CacheManager">
                <property name="defaultCacheName" value="${symbol_pound}{redisCache.name}"/>
                <property name="cachesMap">
                    <util:map>
                        <entry key="${symbol_pound}{redisCache.name}" value-ref="redisCache"/>
                    </util:map>
                </property>
            </bean>
        </property>
    </bean>
    <bean id="redisCache" class="com.yy.ent.platform.core.cache.RedisCache">
        <constructor-arg name="name" value="redis"/>
        <constructor-arg name="prefix" value="${parentArtifactId}_"/>
        <constructor-arg name="redisTemplate" ref="redisTemplate"/>
    </bean>

    <aop:config>
        <aop:aspect ref="cacheInterceptor">
            <aop:pointcut id="Cacheable" expression="@annotation(com.yy.ent.platform.core.cache.Cacheable) or execution(public * ${package}.repository..*.mapper..*Mapper..*(..))"/>
            <aop:around pointcut-ref="Cacheable" method="aroundCacheableInterceptor"/>
        </aop:aspect>
        <aop:aspect ref="cacheInterceptor">
            <aop:pointcut id="CacheEvict" expression="@annotation(com.yy.ent.platform.core.cache.CacheEvict) or execution(public * ${package}.repository..*.mapper..*Mapper..*(..))"/>
            <aop:around pointcut-ref="CacheEvict" method="aroundCacheEvictInterceptor"/>
        </aop:aspect>
        <aop:aspect ref="cacheInterceptor">
            <aop:pointcut id="CachePut" expression="@annotation(com.yy.ent.platform.core.cache.CachePut) or execution(public * ${package}.repository..*.mapper..*Mapper..*(..))"/>
            <aop:around pointcut-ref="CachePut" method="aroundCachePutInterceptor"/>
        </aop:aspect>
    </aop:config>

    <!-- 配置redis 缓存服务器 -->
    <bean id="redisTemplate" class="com.yy.ent.platform.core.redis.RedisTemplate">
        <constructor-arg name="jedisPool" ref="jedisPool"/>
    </bean>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg  name="host" value="${symbol_dollar}{redis.host}"/>
        <constructor-arg  name="port" value="${symbol_dollar}{redis.port}"/>
    </bean>
    <!-- redis pool -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${symbol_dollar}{redis.pool.maxTotal}"/>
        <property name="maxIdle" value="${symbol_dollar}{redis.pool.maxIdle}"/>
        <property name="testOnBorrow" value="${symbol_dollar}{redis.pool.testOnBorrow}"/>
    </bean>
    <!-- mongo -->
    <bean id="mongoClient" class="com.yy.ent.platform.core.mongo.MongoClientBeanFactory">
        <property name="userName" value="${mongo.username}"/>
        <property name="password" value="${mongo.password}"/>
        <property name="database" value="${mongo.dbname}"/>
        <property name="host" value="${mongo.host}"/>
        <property name="port" value="${mongo.port}"/>
        <property name="socketTimeout" value="${mongo.socket_time_out}"/>
        <property name="connectTimeout" value="${mongo.connect_timeout}"/>
        <property name="connectionsPerHost" value="${mongo.connections_per_host}"/>
        <property name="maxWaitTime" value="${mongo.max_wait_time}"/>
    </bean>
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongo" ref="mongoClient"/>
        <constructor-arg name="databaseName" value="${mongo.dbname}"/>
    </bean>

    <!--ent-->
    <bean class="com.yy.ent.platform.core.service.ent.DaemonClientServiceFactoryBean">
        <property name="dbConfigPath" value="classpath:daemon.properties"/>
    </bean>

    <bean class="com.yy.ent.platform.core.service.ent.DaemonClientServiceExtFactoryBean"
          id="DaemonClientServiceExtFactoryBean">
        <property name="dbConfigPath" value="classpath:daemon.properties"/>
    </bean>

    <bean class="com.yy.ent.platform.core.service.ent.EntProxyHalbServiceFactoryBean"
          depends-on="DaemonClientServiceExtFactoryBean">
        <property name="strategy">
            <util:constant static-field="com.yy.ent.commons.halbproxy.HALBProxy${symbol_dollar}Strategy.DEFAULT"/>
        </property>
        <property name="period" value="600000"/>
        <property name="dbConfigPath" value="classpath:external.xml"/>
        <property name="accessPolicy" value="20"/>
    </bean>

    <bean class="com.yy.ent.platform.core.service.ent.YYPClientHALBProxyFactoryBean">
        <property name="strategy">
            <util:constant static-field="com.yy.ent.commons.halbproxy.HALBProxy${symbol_dollar}Strategy.DEFAULT"/>
        </property>
        <property name="period" value="600000"/>
        <property name="dbConfigPath" value="classpath:halb.properties"/>
    </bean>

    <!--dubbo-->
    <bean class="com.yy.ent.platform.core.dubbo.SpringProtocolConfig">
        <property name="ids" value="dubbo"/>
    </bean>
    <dubbo:application name="dubbo-${parentArtifactId}-server"  logger="slf4j"/>
    <dubbo:registry address="${symbol_dollar}{dubbo.registry.address}"/>
    <dubbo:protocol name="dubbo" port="${symbol_dollar}{dubbo.protocol.port}"/>
    <dubbo:monitor protocol="registry"/>
    <dubbo:provider filter="-exception" timeout="60000"/>
    <dubbo:annotation package="${package}.service.dubbo"/>
</beans>