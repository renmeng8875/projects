<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>正则表达式</title>
<script type="text/javascript">
//var re = new RegExp("abc");//RegExp是一个对象,和Array一样
//re=new RegExp("模式字符串","标志");
//re=new RegExp("abc","i");
//ignoreCase 忽略大小写
//var re = /abc/i;
/*
/模式字符串/标志
*/
//alert(re.test("Abcadsfsadf"));
//test方法,测试字符串,符合模式时返回true,否则返回false
	/*var re = /he/;//最简单的正则表达式,将匹配he这个单词
	var str = "he";
	alert(re.test(str));//true
	str = "we";
	alert(re.test(str));//false
	str = "HE";
	alert(re.test(str));//false,大写,如果要大小写都匹配可以指定i标志(i是ignoreCase或case-insensitive的表示)
	re = /he/i;
	alert(re.test(str));//true*/
	var re,s="he is lonely!! he";
	
	
	//re = /^he/i;//脱字符(^)代表字符开始位置

	//alert(re.test("he is lonely!! he"));
	//alert(s.indexOf("he")===0);
	
	re=/s/;// \s匹配任何空白字符，包括空格、制表符、换页符等等
	//alert(re.test("adfadsf"));
	//alert(/s/.test("abcs"));//测试字符串中包含字母s
	///\s/
	//re=/[a-zA-Z0-9]/; // [a-z]匹配任意一个英文字母
	//alert(re.test("87"));
	
	re=/[a-zA-Z0-9_][0-9]/;
	//re=/\w\d/;
	
	var osVersion = "-9---Ubuntu 8----9--";//其中的8表示系统主版本号
	var re = /^[a-z]+\s+\d+$/i; //+号表示字符至少要出现1次,\s表示空白字符,\d表示一个数字
	//var s="@#$";
	//re=/\w*/;//* 表示出现0次或多次
	//alert(re.test(s));
	
	//alert(/^[a-z]*\s+\d+/.test("1 1"));
	
	//re=/([a-z]+)\s+(\d+)/i;//() 分组
	//alert("系统名称:"+/\w+/.exec(osVersion));
	//alert("版本号:"+/\d+/.exec(osVersion));
	//alert(re.exec(osVersion));
	//var a=re.exec(osVersion);
	//alert(a[0]);//与整 个正则表达式匹配的字符串
	//alert(a[1]);//第一个分组
	//alert(a[2]);//第二个分组
	//alert("系统名称:"+a[1]+"\n版本号:"+a[2]);
	var re=/^([a-z]+)\d+$/;
	var s='---abc123---';
	//alert(re.exec(s));
	//alert(s.replace(/-/g,'#'));//将字符串中的每一个"-"替换成"#"
	//将字符串中的连续的'-'替换成单个的'#'
	//'#abc123#'
	//alert(s.replace(/-+/g,'#'));
	
	s="   asdf dsafl  ";
	//去除字符串的前导空格与结尾空格
	//alert('|'+s.replace(/^\s+/,'')+'|');
	//alert('|'+s.replace(/\s+$/,'')+'|');
	/*
	function trim(s) {
		var re1=/^\s+/,re2=/\s+$/;
		s=s.replace(re1,'');
		return s.replace(re2,'');
	}
	
	alert('|'+trim(s)+'|');*/
	
	//s="123,456,789";
	//alert(typeof s.split(','))
	//s=prompt("请输入单词与释义（用空格分隔）：",'');
	//alert(s.split(/\s+/));	
	/*
	s=prompt("请输入你的出生日期(如1990-9-28)：",'');
	var date=s.split('-');
	var year=date[0],
			month=date[1],
			day=date[2];
	alert("Year:"+year+"\nMonth:"+month+"\nDay:"+day);
	
	s=prompt("请输入你的出生日期(如1990-9-28)：",'');
	var date=s.split(/[^0-9]+/);
	var year=date[0],
			month=date[1],
			day=date[2];
	alert("Year:"+year+"\nMonth:"+month+"\nDay:"+day);*/
	/*
	s="My age is 8.";
	alert(s.search(/\d+/));*/
	
	//str = "My age is 18.Golden age 19!";//年龄不是一定的,我们用indexOf不能查找它的位置
	//re = /\d+/;
	//alert(str.search(re));//返回查找到的字符串开始下标10
	//注意,因为查找本身就是出现第一次就立即返回,所以无需在search时使用g标志
	//下面的代码虽然不出错,但g标志是多余的
	//re=/\d+/g;
	//alert(str.search(re));//仍然是10
	//alert(str.search(re));//仍然是10
	//alert(str.search(re));//仍然是10
	
	s="Ubuntu   8.18";
	//re=/^([a-z]+)\s+(\d+)\.(\d+)$/i;// . 表示任意字符（除换行符）
	//alert(s.match(re));
	
	re=/^([a-z]+)\s+(\d+)\.(\d+)$/i;
	
	//alert(re.lastIndex);
	//s.indexOf('要查找的字符串')
	//s.indexOf('要查找的字符串',从字符串哪里开始查找)
	//alert(s.indexOf('8',8));
	
	re=/\d+/g;
	//alert(re.exec(s));
	//alert(re.lastIndex);//下一次开始查找的位置
	//alert(re.exec(s));
	//alert(re.lastIndex);
	
	/*re.lastIndex=10;//可以手动设置
	alert(re.exec(s));//18
	alert(re.lastIndex);//13
	alert(re.exec(s));
	alert(re.lastIndex);//13
	alert(re.exec(s));
	alert(re.lastIndex);//13*/
	//re=new RegExp();
	//String.fromCharCode
	/*re.exec(s);
	re.exec("CJ");
	alert(RegExp.input);*/
	/*
	re = /[a-z](\d+)/gi;
	str = "Class1 Class2 Class3";
	re.test(str);
	alert(RegExp.lastParen);//1
	re.test(str);
	alert(RegExp.lastParen);//2
	re.test(str);
	alert(RegExp.lastParen);//3*/
	/*
	re = /[A-Z]/g;
	str = "123ABC456";
	re.test(str);
	alert(RegExp.leftContext);//123
	alert(RegExp.rightContext);//BC456
	
	re.test(str);
	alert(RegExp.leftContext);//123A
	alert(RegExp.rightContext);//C456
	
		re.test(str);
	alert(RegExp.leftContext);//123AB
	alert(RegExp.rightContext);//456*/
	/*
	re=/(\d+)-(\d+)-(\d+)/;
	s="2000-9-19";
	var array=re.exec(s);
	alert(RegExp.$1);
	alert(RegExp.$2);
	alert(RegExp.$3);
	alert(RegExp.$4);
	alert(RegExp.$5);*/
	
	/*re =/^\d+\./mg;
	s="1.ABC\n2.DEF\n3.HIJK";
	alert(s.replace(re,''));*/
	
	//re=/\?/;//除换行任意的一个字符
	/*re =new RegExp("\\?");
	alert(re.test("?"));*/
	//ASCII方式用十六进制数来表示特殊字符
	/*var re = /^\n$/;//将匹配CJ
	alert(re.test("\r"));*/
	//re=/^[a-z2-80-\.]$/;
	//在范围类里面，只有[,],-,.
	/*re=/[\[\]]/;//一个正则表达式，要匹配[,],-
	alert(re.test("["));
	/[^\n]/;*/
	//re=/^\d{1,}$/;
	//   /\d+/ equals /\d{1,}/
	//		/\d*/   /\d{0,}/
	//		/\d?/   /\d{0,1}/
	//alert(re.test('122'));//月份
	//贪婪 能匹配多少匹配多少
	//惰性		能匹配少一些就少一些
	/*re=/(\d+?)0/;
	s="1000";
	alert(re.exec(s));*/
	
	/*re=/(\d+)(?:[a-z])/;
	alert(re.exec("123abc"));*/
	
	/*re=/(?:if|else) (\d)/;//或 (if/else) 9
	alert(re.exec("if 6"));*/
	
	var re = /(A?(B?(C?)))/;
	/*上面的正则表达式将依次产生三个分组
	(A?(B?(C?))) 最外面的
	(B?(C?))
	(C?)*/
	//嵌套分组，从外往内
	
	/*s="ABC";
	alert(re.exec(s))*/
	
	function trim(s) {
		var re=/^\s*(.*?)\s*$/;
		
		//return re.exec(s)[1];
		return s.replace(re,'$1');
	}
	
	//alert("|"+trim("")+"|");
	/*
	re=/(\d+)-(\d+)/;
	
	s="23-45";
	alert(s.replace(re,"$2-$1"));*/
	
	/*re=/(\d{3})-\1/;//某种证号，前三个数字和后三个数字是一样的
	s="123-145";
	a=re.exec(s);
	alert(a[1]==a[2]);
	alert(re.test(s));*/
	
	//反向引用也可以在正则表达式中使用\1 ,\2...这类的形式使用
	/*re = /\d{4}(\D)\d{1,2}\1\d{1,2}/;
	str = "2008-1-1";
	alert(re.test(str));//true
	str = "2008-4_3";
	alert(re.test(str));//false*/
	
	s="Ubuntu 8.10 is a good OS.Ubuntu 8.10 is a good OS.";
	//正向前瞻
	re=/([a-z]+)(?=\s+8\.10)/gi;//只把出现在" 8.10"之前的那个单词替换成Debian
	alert(s.replace(re,'Debian'));
	alert(s.replace(/[a-z]+(\s+8\.10)/gi,'Debian$1'));

</script>

</head>
<body>
<h1>正则表达式 </h1>
</body>
</html>